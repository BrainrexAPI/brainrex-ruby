=begin
#Brainrex API Explorer

#Welcome to the Brainrex API explorer, we make analytics tools for crypto and blockchain. Our currently propiertary models offer sentiment analysis, market making, blockchain monitoring and face-id verification. This AI models can be consumed from this API. We also offer integrations to open data and propietary data providers, as well as free test data we collect. There is a collection of data transformation tools. Join our Telegram group to get the latest news and ask questions [https://t.me/brainrex, #brainrex](https://t.me/brainrex). More about Brainrex at [https://brainrex.com](http://brainrex.com). Full Documentation can be found at [https://brainrexapi.github.io/docs](https://brainrexapi.github.io/docs)

OpenAPI spec version: 0.1.1
Contact: support@brainrex.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8

=end

require 'uri'

module SwaggerClient
  class CryptoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Downloads candle format market data
    # Returns a list of candle data from specified market and data range
    # @param request Person to create
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse201]
    def exchanges_download_candles(request, opts = {})
      data, _status_code, _headers = exchanges_download_candles_with_http_info(request, opts)
      data
    end

    # Downloads candle format market data
    # Returns a list of candle data from specified market and data range
    # @param request Person to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def exchanges_download_candles_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CryptoApi.exchanges_download_candles ...'
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling CryptoApi.exchanges_download_candles"
      end
      # resource path
      local_var_path = '/download_candles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CryptoApi#exchanges_download_candles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # The markets data structure supported by the Brainrex Market API
    # Read the list of supported markets ( currency pairs ) in each exchange
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def exchanges_list(opts = {})
      data, _status_code, _headers = exchanges_list_with_http_info(opts)
      data
    end

    # The markets data structure supported by the Brainrex Market API
    # Read the list of supported markets ( currency pairs ) in each exchange
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def exchanges_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CryptoApi.exchanges_list ...'
      end
      # resource path
      local_var_path = '/markets'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CryptoApi#exchanges_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Market Making as a Service API.
    # Our AI will trade at the risk level you want, you need to provide your credential to the exchange you are trading at.
    # @param request Name of exchange and currency pair you want to provide liquidity
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2011]
    def exchanges_marketmaker(request, opts = {})
      data, _status_code, _headers = exchanges_marketmaker_with_http_info(request, opts)
      data
    end

    # Market Making as a Service API.
    # Our AI will trade at the risk level you want, you need to provide your credential to the exchange you are trading at.
    # @param request Name of exchange and currency pair you want to provide liquidity
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2011, Fixnum, Hash)>] InlineResponse2011 data, response status code and response headers
    def exchanges_marketmaker_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CryptoApi.exchanges_marketmaker ...'
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling CryptoApi.exchanges_marketmaker"
      end
      # resource path
      local_var_path = '/market_making'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse2011')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CryptoApi#exchanges_marketmaker\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # The exchanges data structure supported by the Brainrex API
    # Read the list of supported exchanges in the Market Data API
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def exchanges_read(opts = {})
      data, _status_code, _headers = exchanges_read_with_http_info(opts)
      data
    end

    # The exchanges data structure supported by the Brainrex API
    # Read the list of supported exchanges in the Market Data API
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def exchanges_read_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CryptoApi.exchanges_read ...'
      end
      # resource path
      local_var_path = '/exchanges'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CryptoApi#exchanges_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download raw ticker data from major crypto markets
    # Downloads specified asset class and market and time frame. Of our raw ticker data format
    # @param request Person to create
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse201]
    def exchanges_ticker_data_download(request, opts = {})
      data, _status_code, _headers = exchanges_ticker_data_download_with_http_info(request, opts)
      data
    end

    # Download raw ticker data from major crypto markets
    # Downloads specified asset class and market and time frame. Of our raw ticker data format
    # @param request Person to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse201, Fixnum, Hash)>] InlineResponse201 data, response status code and response headers
    def exchanges_ticker_data_download_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CryptoApi.exchanges_ticker_data_download ...'
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling CryptoApi.exchanges_ticker_data_download"
      end
      # resource path
      local_var_path = '/download_ticker'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse201')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CryptoApi#exchanges_ticker_data_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
